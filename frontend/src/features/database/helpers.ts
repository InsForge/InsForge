import { ColumnSchema, ColumnType } from '@insforge/shared-schemas';
import { z } from 'zod';

// Helper function to check if a field should be auto-generated
export function isAutoGeneratedField(field: ColumnSchema): boolean {
  // Don't hide the ID field - it should be shown with optional input
  if (field.isPrimaryKey && field.columnName === 'id') {
    return false;
  }

  // Check for UUID pattern in default value
  if (field.defaultValue && typeof field.defaultValue === 'string') {
    // SQLite UUID generation pattern
    if (field.defaultValue.includes('randomblob') || field.defaultValue.includes('hex')) {
      return true;
    }

    // Only hide CURRENT_TIMESTAMP fields if they are isNullable (auto-managed)
    // Non-isNullable datetime fields should be shown so users can set specific values
    if (field.defaultValue.toUpperCase().includes('CURRENT_TIMESTAMP')) {
      // Hide auto-managed timestamp fields (created_at, updated_at) - these are typically isNullable and auto-managed
      if (field.columnName === 'created_at' || field.columnName === 'updated_at') {
        return true;
      }
      // Show non-isNullable datetime fields even if they have CURRENT_TIMESTAMP default
      // Users might want to set a specific datetime instead of using the default
      return false;
    }
  }

  return false;
}

// Helper function to build dynamic Zod schema based on column definitions
export function buildDynamicSchema(columns: ColumnSchema[]) {
  const schemaFields: Record<string, any> = {};

  columns.forEach((column) => {
    // Skip auto-generated fields
    if (isAutoGeneratedField(column)) {
      return;
    }

    let fieldSchema;

    // Special handling for ID field - always optional for creation
    if (column.columnName === 'id' && column.isPrimaryKey) {
      fieldSchema = z.string().optional();
      schemaFields[column.columnName] = fieldSchema;
      return;
    }

    switch (column.type) {
      case ColumnType.STRING:
        fieldSchema = z.string();
        if (!column.isNullable) {
          fieldSchema = fieldSchema.min(1, `${column.columnName} is required`);
        }
        break;
      case ColumnType.INTEGER:
        fieldSchema = z.number().int();
        if (column.isNullable) {
          fieldSchema = fieldSchema.nullable().optional();
        }
        break;
      case ColumnType.FLOAT:
        fieldSchema = z.number();
        if (column.isNullable) {
          fieldSchema = fieldSchema.nullable().optional();
        }
        break;
      case ColumnType.BOOLEAN:
        fieldSchema = z.boolean();
        if (column.isNullable) {
          fieldSchema = fieldSchema.nullable().optional();
        }
        break;
      case ColumnType.DATETIME:
        fieldSchema = z.string(); // ISO date string
        if (column.isNullable) {
          fieldSchema = fieldSchema.nullable().optional();
        }
        break;
      case ColumnType.JSON:
        fieldSchema = z.string(); // JSON string
        if (column.isNullable) {
          fieldSchema = fieldSchema.nullable().optional();
        }
        break;
      default:
        fieldSchema = z.any();
        if (column.isNullable) {
          fieldSchema = fieldSchema.nullable().optional();
        }
    }

    schemaFields[column.columnName] = fieldSchema;
  });

  return z.object(schemaFields);
}

// Get initial values for form based on column definitions
export function getInitialValues(columns: ColumnSchema[]): Record<string, any> {
  const values: Record<string, any> = {};

  columns.forEach((column) => {
    // Skip auto-generated fields
    if (isAutoGeneratedField(column)) {
      return;
    }

    // ID field should default to empty string (optional)
    if (column.columnName === 'id' && column.isPrimaryKey) {
      values[column.columnName] = '';
      return;
    }

    // Set default values based on type
    switch (column.type) {
      case ColumnType.BOOLEAN:
        values[column.columnName] = column.isNullable ? null : false;
        break;
      case ColumnType.INTEGER:
      case ColumnType.FLOAT:
        values[column.columnName] = column.isNullable ? undefined : 0;
        break;
      default:
        values[column.columnName] = '';
    }
  });

  return values;
}
